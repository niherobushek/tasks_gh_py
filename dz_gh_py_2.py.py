print('''1. Создать список и заполнить его элементами различных типов данных. 
Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() 
для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
____________________________________________________________________________________________________''')
1

a = [_ for _ in set('заполнить его элементами')]
b = [int(_) for _ in '123456']
c = [type(_) for _ in a + b]

print(*c)

print('''2. Для списка реализовать обмен значений соседних элементов. Значениями обмениваются 
элементы с индексами 0 и 1, 2 и 3 и т. д. При нечётном количестве элементов последний 
сохранить на своём месте. Для заполнения списка элементов нужно использовать функцию input().
____________________________________________________________________________________________
''')

a = [_ for _ in list(input('введи строку для замены символов: '))]

for i in range(0, len(a)-1, 2):
  a[i], a[i + 1] = a[i + 1], a[i]

print(*a)

print('''3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, к какому времени года 
относится месяц (зима, весна, лето, осень). Напишите решения через list и dict.
____________________________________________________________________________________________
''')
a = int(input('вводи месяц в виде целого числа от 1 до 12: '))
d = {(3,4,5): 'весна', (6,7,8): 'лето', (9,10,11): 'осень', (12,1,2): 'зима'}

for i in d.keys():
  if a in i:
    print(f'время года - {d[i]}')

print('''4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое
 слово с новой строки. Строки нужно пронумеровать. Если слово длинное, выводить только первые 10 букв в слове.
 ____________________________________________________________________________________________
 ''')
a = input('введите фразу: ').split()
coun = 1
for i in a:
  print(coun, end = ' ')
  coun += 1
  if len(i) > 10:
    print(i[:10])
  else:
    print(i)

print('''5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает. 
У пользователя нужно запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми 
значениями, то новый элемент с тем же значением должен разместиться после них.
Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].
____________________________________________________________________________________________
''')

vv = int(input())

my_list = [7, 5, 3, 3, 2]
my_list1 = sorted([7, 5, 3, 3, 2] + [vv], reverse=True) # либо [::-1]

print(f'''Набор натуральных чисел: {my_list}. 
Пользователь ввёл число {vv}. Результат: {my_list1}''')

print('''6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. 
Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер 
товара и словарь с параметрами, то есть характеристиками товара: название, цена, количество, 
единица измерения. Структуру нужно сформировать программно, запросив все данные у пользователя.
Пример готовой структуры:

[
(1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
(2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
(3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
]

Нужно собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, 
например, название. Тогда значение — список значений-характеристик, например, список названий товаров.
Пример:

{
“название”: [“компьютер”, “принтер”, “сканер”],
“цена”: [20000, 6000, 2000],
“количество”: [5, 2, 7],
“ед”: [“шт.”]
}
____________________________________________________________________________________________
''')
flag = input('Будем вводить значения с клавиатуры или воспользуемся Примером? Y | N ')
sps = [] if flag == 'Y' else None
if flag == 'Y':
  for i in range(1,4):
    sps.append((i, {'название': input('введите название прибора: '), 'цена': input('введите цену прибора: '), 'количество': input('введите количество: '), 'eд': input('введите еденицу измерения: ')}))
else:
  print('вы ввели не Y, поэтому дальше пользуемся примером')

def analis(sp = q):
  if sp == None:
    q= [
    (1, {'“название”': '“компьютер”', '“цена”': 20000, '“количество”': 5, '“eд”': 'шт'}),
    (2, {'“название”': '“принтер”', '“цена”': 6000, '“количество”': 2, '“eд”': 'шт'}),
    (3, {'“название”': '“сканер”', '“цена”': 2000, '“количество”': 7, '“eд”': 'шт'})
    ]
  else:
    q = sp
  rez = []
  for i in q:
    rez.append(i[1])

  rez1 = {}
  for qq in rez:
    for k,z in qq.items():
      if k in rez1:
        rez1[k].append(rez[rez.index(qq)][k])
      else:
        rez1[k] =[z]

  return rez1

print(analis(sps))