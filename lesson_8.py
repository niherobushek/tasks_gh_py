# -*- coding: utf-8 -*-
"""lesson 8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EWy0P8kJddXvP3vFDAsqVQSH7p2Qh7Qr
"""

'''1. Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата «день-месяц-год».
В рамках класса реализовать два метода. Первый, с декоратором @classmethod.
Он должен извлекать число, месяц, год и преобразовывать их тип к типу «Число».
Второй, с декоратором @staticmethod, должен проводить валидацию числа, месяца и года (например, месяц — от 1 до 12).
Проверить работу полученной структуры на реальных данных.
'''


class Data:
    def __init__(self, dmy):
        self.dmy = dmy

    @classmethod
    def extract(cls, dmy):
        date = dmy.split('-')
        return [int(date[0]), int(date[1]), int(date[2])]

    @staticmethod
    def valid(dat):
        if 1 <= dat[0] <= 31:
            if 1 <= dat[1] <= 12:
                if 2100 >= dat[2] >= 0:
                    return f'Введен правильный формат даты.'
                else:
                    return f'Введен неправильный формат года.'
            else:
                return f'Введен неправильный формат месяца.'
        else:
            return f'Введен неправильный формат дня.'

    def __str__(self):
        n_m = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']
        r1 = [i for i in Data.extract(self.dmy)]
        return f'Текущая дата: {r1[0]} {n_m[r1[1]] if r1[1] in range(12) else r1[1]} {r1[2]} года.'


today = Data('02-02-2001')
print(today)
print(today.valid([11,11,2211]))
print(today.valid([11,14,2211]))
print(Data.valid([11,11,2009]), Data('02-02-2001'))

'''2. Создайте собственный класс-исключение, обрабатывающий ситуацию деления на ноль.
Проверьте его работу на данных, вводимых пользователем. При вводе нуля в качестве делителя программа должна
корректно обработать эту ситуацию и не завершиться с ошибкой.'''
class Dbz:
    def __init__(self, d1, d2):
        self.d1 = d1
        self.d2 = d2

    @staticmethod
    def d(d1, d2):
      return d1/d2 if d2 != 0 else f'Деление на ноль недопустимо'

print(Dbz.d(5, 0))
print(Dbz.d(100, 1.1))

'''3 . Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять
список необходимо только числами. Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь
сам не остановит работу скрипта, введя, например, команду «stop». При этом скрипт завершается,
сформированный список с числами выводится на экран.
Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю
ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.'''
class Error:
    def __init__(self, *args):
        self.my_list = []

    def inp(self):
      fl = True
      while fl:
        val = input('Введите значения - (остановить цикл введите stop): ')
        if val.isdigit():    
            self.my_list.append(int(val))
            print(self.my_list)
        elif val == 'stop':
          fl = False
          return 'Остановлен'
          break
        else:
          print('Это не число!')

                
tr = Error()
print(tr.inp())

'''4. Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад.
А также класс «Оргтехника», который будет базовым для классов-наследников.
Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс).
В базовом классе определите параметры, общие для приведённых типов.
В классах-наследниках реализуйте параметры, уникальные для каждого типа оргтехники.
5. Продолжить работу над первым заданием. Разработайте методы, которые отвечают за приём оргтехники
на склад и передачу в определённое подразделение компании. Для хранения данных о наименовании
и количестве единиц оргтехники, а также других данных, можно использовать любую подходящую структуру (например, словарь).
6. Продолжить работу над вторым заданием. Реализуйте механизм валидации вводимых пользователем данных.
Например, для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных.
Подсказка: постарайтесь реализовать в проекте «Склад оргтехники» максимум возможностей, изученных на уроках по ООП.'''

class StoreMashines:

    def __init__(self, name, price, quantity, *args):
        self.name = name
        self.price = price
        self.quantity = quantity
        self.store = []
        self.unit = {'Модель устройства': self.name, 'Цена за ед': self.price, 'Количество': self.quantity}

    def __str__(self):
        return f'{self.name} цена {self.price} количество {self.quantity}'

    def reception(self):

      unit = input('Введите наименование прибора ')

      fl = True
 
      unit_p = input('Введите цену за ед [формат 111.11 или 111] ')
      a = unit_p.split() if '.' in unit_p or unit_p.isdigit() else '[eq'
      
      for i in a:
        if i.isdigit():
          continue
        else:
          fl = False
          print('Неверный ввод, конец цикла ибо долго мучаться с вынепередумали и всетакое')
          break
      
      unit_p = float('.'.join(a)) if fl else '[eq'
      unit_q = input('Введите количество ')
      
      if unit_q.isdigit():
        unit_q = int(unit_q)
      else:
        fl = False
        print('Неверный ввод, конец цикла ибо долго мучаться с вынепередумали и всетакое')
      
      if fl:
        
        self.unit = {'Модель устройства': unit, 'Цена за ед': unit_p, 'Количество': unit_q}
        self.store.append(self.unit)
        print(f'Для выхода - Q')

        q = input() 

        if q in 'Qq':
            print(f'Весь склад{self.store}')
            return'Выход'
        else:
            StoreMashines.reception(self)
      
      else:
        print('Ошибка ввода данных')
        return ''




class Printer(StoreMashines):
  def hm_print(self):
    return f'Количество принтеров: {self.quantity}'


class Scanner(StoreMashines):
  def hm_scan(self):
    return f'Количество сканеров: {self.quantity}'


class Copier(StoreMashines):
  def hm_copier(self):
    return f'Количество ксероксов: {self.quantity}'

unit_1 = Printer('Кисера', 5000, 5)
unit_2 = Scanner('ХП', 2200, 10)
unit_3 = Copier('Ксерокс', 11500, 3)

print(unit_1.reception())

print(unit_1.hm_print())
print(unit_2.hm_scan())
print(unit_3.hm_copier())

'''7. Реализовать проект «Операции с комплексными числами». Создайте класс «Комплексное число».
Реализуйте перегрузку методов сложения и умножения комплексных чисел. Проверьте работу проекта.
Для этого создаёте экземпляры класса (комплексные числа), выполните сложение и умножение созданных экземпляров.
Проверьте корректность полученного результата.'''

class Cn:
    def __init__(self, a, b, *args):
        self.a = a
        self.b = b
        self.c = 'a + b * i'

    def __add__(self, other):
        print(f'Сумма 1 и 2 чила равны {self.a + other.a} + {self.b + other.b} * i')
        return ''
    def __mul__(self, other):
        print(f'Произведение 1 и 2 числа равны {self.a * other.a - (self.b * other.b)} + {self.b * other.a} * i')
        return ''
    def __str__(self):
        return f'КЧ {self.a} + {self.b} * i\n'


ch1 = Cn(1, -2)
ch2 = Cn(3, 4)

print(ch1)

print(ch1 + ch2)
print(ch1 * ch2)