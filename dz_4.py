# -*- coding: utf-8 -*-
"""dz 4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BXbmh42NRhZQGbd75ld4M8gLD1x-sB9U
"""

'''1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных
значений необходимо запускать скрипт с параметрами.'''

#сохраню так... в терменале на пайчарме код работает

from sys import argv

name, vch, sch, pr = argv

def rzp(vch, sch, pr):
  return (float(vch)*float(sch))+float(pr)

if __name__ == '__main__':
  print(rzp(vch, sch, pr))

'''2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.

Пример исходного списка: .
Результат: [12, 44, 4, 10, 78, 123].'''

ic = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
ic_n = [ic[i] for i in range(1,len(ic)) if ic[i] > ic[i-1]]

print(ic_n)

'''3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.

Подсказка: используйте функцию range() и генератор.'''

print([i for i in range(20,241) if i%20 == 0 or i%21 == 0])

'''4. Представлен список чисел. Определите элементы списка, не имеющие повторений.
Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите
в порядке их следования в исходном списке. Для выполнения задания обязательно используйте генератор.

Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]'''

ic1 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
ic1_n = []
for i in ic1:
  if ic1.count(i) > 1:
    continue
  else:
    ic1_n.append(i)

print(ic1_n)

'''5. Реализовать формирование списка, используя функцию range() и возможности генератора.
В список должны войти чётные числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.

Подсказка: использовать функцию reduce().'''

from functools import reduce

print(reduce(lambda x,y: x + y,[i for i in range(100,1001) if i%2 == 0]))

'''6. Реализовать два небольших скрипта:
итератор, генерирующий целые числа, начиная с указанного;
итератор, повторяющий элементы некоторого списка, определённого заранее.

Подсказка: используйте функцию count() и cycle() модуля itertools.

Обратите внимание, что создаваемый цикл не должен быть бесконечным.
Предусмотрите условие его завершения. ####

Например, в первом задании выводим целые числа, начиная с 3.
При достижении числа 10 — завершаем цикл.

Вторым пунктом необходимо
предусмотреть условие, при котором повторение элементов списка прекратится.'''


def cyc1():
  from itertools import count
  a, b = int(input('введите начальное число')), int(input('введите число на котором закончиться генератор'))
  a = []
  for i in count(start=x, step=1):
    a.append(i)
    if i == en:
      break
  return a

if __name__ == '__main__':
  print(cyc1(a,b))

#______________________________________
# код для 2 скрипта к предыдущей задаче

def cyc2():
  from itertools import cycle
  a = [i for i in input('введите список, элементов через пробел ').split()]
  b = int(input('введите количество повторений '))
  a_n = []
  for i, j in enumerate(cycle(a)):
    if i == b*len(a):
      break
    a_n.append(j)
  return a_n

if __name__ == '__main__':
  print(cyc2())

'''7. Реализовать генератор с помощью функции с ключевым словом yield,
создающим очередное значение. При вызове функции должен создаваться объект-генератор.
Функция вызывается следующим образом: for el in fact(n). Она отвечает за получение факториала числа.
В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.

Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.'''
from math import factorial
def g(a) :
  return factorial(a)

a = []
n = int(input())

for i in range(1,n+1):
  a.append(g(i))

a