# -*- coding: utf-8 -*-
"""lessen 6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1It44VvtRqSbdLr1Dn1G-4YnGU4S9-9w3
"""

'''1. Создать класс TrafficLight (светофор).
определить у него один атрибут color (цвет) и метод running (запуск);
атрибут реализовать как приватный;
в рамках метода реализовать переключение светофора в режимы: красный, жёлтый, зелёный;
продолжительность первого состояния (красный) составляет 7 секунд, второго (жёлтый) — 2 секунды, третьего (зелёный) — на ваше усмотрение;
переключение между режимами должно осуществляться только в указанном порядке (красный, жёлтый, зелёный);
проверить работу примера, создав экземпляр и вызвав описанный метод.

Задачу можно усложнить, реализовав проверку порядка режимов.
При его нарушении выводить соответствующее сообщение и завершать скрипт.'''

import time

class TrafficLight:
    _color = ['КРАСНЫЙ', 'ЖЕЛТЫЙ', 'ЗЕЛЕНЫЙ']
    _tim = [7,2,3]
    def run(self):
        i = 0
        while i != 3:
            print(TrafficLight._color[i])
            if i == 0:
               print(f'время режима: {TrafficLight._tim[i]} сек.')
               time.sleep(TrafficLight._tim[i])
            elif i == 1:
                print(f'время режима: {TrafficLight._tim[i]} сек.')
                time.sleep(TrafficLight._tim[i])
            elif i == 2:
                print(f'время режима: {TrafficLight._tim[i]} сек.')
                time.sleep(TrafficLight._tim[i])
            i += 1
        print('Цикл завершен')


t = TrafficLight()
t.run()

'''2. Реализовать класс Road (дорога).
определить атрибуты: length (длина), width (ширина);
значения атрибутов должны передаваться при создании экземпляра класса;
атрибуты сделать защищёнными;
определить метод расчёта массы асфальта, необходимого для покрытия всей дороги;

использовать формулу: длина*ширина*масса асфальта для покрытия одного кв. метра дороги асфальтом, толщиной в 1 см*число см толщины полотна;
проверить работу метода.
Например: 20 м*5000 м*25 кг*5 см = 12500 т.'''

class Road:

    def __init__(self, length, width, weight, height):
      self._length = length
      self._width = width
      self._weight = weight
      self._height = height
      
    def mass(self):
      asphalt_mass = self._length * self._width * self._weight * self._height / 1000
      print(f'Неободимо {round(asphalt_mass)} т. асфальта')


m = Road(5000, 20, 25, 5)
m.mass()

'''3. Реализовать базовый класс Worker (работник).
определить атрибуты: name, surname, position (должность), income (доход);
последний атрибут должен быть защищённым и ссылаться на словарь,
содержащий элементы: оклад и премия, например, {"wage": wage, "bonus": bonus};
создать класс Position (должность) на базе класса Worker;

в классе Position реализовать методы получения полного имени сотрудника (get_full_name)
и дохода с учётом премии (get_total_income);
проверить работу примера на реальных данных: создать экземпляры класса Position, передать данные,
проверить значения атрибутов, вызвать методы экземпляров.'''

class Worker:

    def __init__(self, name, sn, po, wage, bonus):
        self.name = name
        self.sn = sn
        self.po = po
        self._income = {"wage": int(wage), "bonus": int(bonus)}


class Position(Worker):

    def get_full_name(self):
        return self.name + ' ' + self.sn

    def get_total_income(self):
        return self._income["wage"] + self._income["bonus"]


p = Position('Елисей', 'Акукасрачев', 'дворник', '5000', '2000')
print(f'Имя фамилия: {p.get_full_name()}', f'\nСколько дадут: {p.get_total_income()}')

'''4. Реализуйте базовый класс Car.
у класса должны быть следующие атрибуты: speed, color, name, is_police (булево).
А также методы: go, stop, turn(direction), которые должны сообщать, что машина поехала, остановилась, повернула (куда);
опишите несколько дочерних классов: TownCar, SportCar, WorkCar, PoliceCar;
добавьте в базовый класс метод show_speed, который должен показывать текущую скорость автомобиля;
для классов TownCar и WorkCar переопределите метод show_speed.
При значении скорости свыше 60 (TownCar) и 40 (WorkCar) должно выводиться сообщение о превышении скорости.
Создайте экземпляры классов, передайте значения атрибутов. Выполните доступ к атрибутам,
выведите результат. Вызовите методы и покажите результат.'''

class Car:

    def __init__(self, name, speed, color, is_police=False):
        self.name = name
        self.speed = speed
        self.color = color
        self.is_police = is_police

    def go(self):
        return f'Автомобиль {self.name} (цвет - {self.color}) начал движение.'

    def stop(self):
        return f'\nАвтомобиль {self.name} прекратил движение.'

    def turn(self, d):
        return f'\nАвтомобиль {self.name} повернул на{d}'

    def speed_s(self):
        return f'\nВаша скорость {self.speed}'


class TownCar(Car):
    def show_speed(self):
        if self.speed > 60 and not self.is_police:
            return f'\nВы превысили скорость на {self.speed-60}! Сбавте скорость, ваша скорость: {self.speed}'
        else:
            return f'\nСкорость {self.name} является нормальной: {self.speed}'


class WorkCar(Car):
    def show_speed(self):
        if self.speed > 40 and not self.is_police:
            return f'\nВы превысили скорость на {self.speed-40}! Сбавте скорость, ваша скорость: {self.speed}'
        else:
            return f'\nСкорость {self.name} является нормальной: {self.speed}'

class SportCar(Car):
    def show_speed(self):
        if self.speed > 60 and not self.is_police:
            return f'\nВы превысили скорость на {self.speed-60}! Сбавте скорость, ваша скорость: {self.speed}'
        else:
            return f'\nСкорость {self.name} является нормальной: {self.speed}'

class PoliceCar(Car):
    def show_speed(self):
        if self.speed > 60 and not self.is_police:
            return f'\nВы превысили скорость на {self.speed-60}! Сбавте скорость, ваша скорость: {self.speed}'
        else:
            return f'\nСкорость {self.name} может быть любой =)'


town = TownCar('ТоЁта', 90, 'черный', False)
print(town.go(), town.show_speed(), town.turn('лево'), town.turn('лево'), town.stop(), '\n')

work = WorkCar('Газелька', 30, 'белый', False)
print(work.go(), work.show_speed(), work.turn('право'), work.stop(), '\n')

sport = SportCar('Ферари', 370, 'рыжый', False)
print(sport.go(), sport.show_speed(), sport.turn('право'), sport.turn('право'), sport.stop(), '\n')

police = PoliceCar('ЛадаСедан', 100, 'БАКЛАЖАН', True)
print(police.go(), police.show_speed(), police.turn('лево'), police.stop(), '\n')

'''5. Реализовать класс Stationery (канцелярская принадлежность).
определить в нём атрибут title (название) и метод draw (отрисовка). Метод выводит сообщение «Запуск отрисовки»;
создать три дочерних класса Pen (ручка), Pencil (карандаш), Handle (маркер);
в каждом классе реализовать переопределение метода draw. Для каждого класса метод должен выводить уникальное сообщение;
создать экземпляры классов и проверить, что выведет описанный метод для каждого экземпляра.'''

class Stat:
    def __init__(self, title):
        self.title = title

    def draw(self):
        return f'Запуск отрисовки'


class Pen(Stat):
    def draw(self):
        return f'Запуск отрисовки {self.title}'


class Pencil(Stat):
    def draw(self):
        return f'Запуск отрисовки {self.title}'


class Handle(Stat):
    def draw(self):
        return f'Запуск отрисовки {self.title}'


pen = Pen('ручкой')
print(pen.draw())
pencil = Pencil('карандашем')
print(pencil.draw())
handle = Handle('маркером')
print(handle.draw())